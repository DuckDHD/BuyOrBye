package models

import (
	"fmt"

	"github.com/DuckDHD/BuyOrBye/internal/domain"
	"gorm.io/gorm"
)

// HealthProfileModel represents the health profile database model
type HealthProfileModel struct {
	gorm.Model
	
	// Basic Information
	UserID     string  `gorm:"uniqueIndex;not null;size:36" json:"user_id"`         // One profile per user
	Age        int     `gorm:"not null;check:age >= 0 AND age <= 150" json:"age"`
	Gender     string  `gorm:"not null;size:10;check:gender IN ('male','female','other')" json:"gender"`
	Height     float64 `gorm:"not null;check:height > 0" json:"height"`             // in cm
	Weight     float64 `gorm:"not null;check:weight > 0" json:"weight"`             // in kg  
	BMI        float64 `gorm:"not null" json:"bmi"`                                 // calculated BMI
	FamilySize int     `gorm:"not null;check:family_size >= 1 AND family_size <= 20" json:"family_size"`
	
	// Relationships - One profile has many conditions, expenses, and policies
	Conditions []MedicalConditionModel `gorm:"foreignKey:ProfileID;constraint:OnDelete:CASCADE" json:"conditions,omitempty"`
	Expenses   []MedicalExpenseModel   `gorm:"foreignKey:ProfileID;constraint:OnDelete:CASCADE" json:"expenses,omitempty"`  
	Policies   []InsurancePolicyModel  `gorm:"foreignKey:ProfileID;constraint:OnDelete:CASCADE" json:"policies,omitempty"`
}

// TableName overrides the table name used by HealthProfileModel to `health_profiles`
func (HealthProfileModel) TableName() string {
	return "health_profiles"
}

// BeforeCreate calculates BMI before creating the record
func (h *HealthProfileModel) BeforeCreate(tx *gorm.DB) error {
	h.calculateBMI()
	return nil
}

// BeforeUpdate calculates BMI before updating the record  
func (h *HealthProfileModel) BeforeUpdate(tx *gorm.DB) error {
	h.calculateBMI()
	return nil
}

// calculateBMI calculates and sets the BMI field
func (h *HealthProfileModel) calculateBMI() {
	if h.Height > 0 && h.Weight > 0 {
		heightInMeters := h.Height / 100.0
		h.BMI = h.Weight / (heightInMeters * heightInMeters)
	}
}

// ToDomain converts HealthProfileModel to domain.HealthProfile
func (h *HealthProfileModel) ToDomain() *domain.HealthProfile {
	return &domain.HealthProfile{
		ID:         fmt.Sprintf("%d", h.ID), // Convert uint to string
		UserID:     h.UserID,
		Age:        h.Age,
		Gender:     h.Gender,
		Height:     h.Height,
		Weight:     h.Weight,
		BMI:        h.BMI,
		FamilySize: h.FamilySize,
		CreatedAt:  h.CreatedAt,
		UpdatedAt:  h.UpdatedAt,
	}
}

// FromDomain creates HealthProfileModel from domain.HealthProfile
func (h *HealthProfileModel) FromDomain(profile *domain.HealthProfile) {
	// Note: We don't set ID since it's auto-generated by GORM
	h.UserID = profile.UserID
	h.Age = profile.Age
	h.Gender = profile.Gender
	h.Height = profile.Height
	h.Weight = profile.Weight
	h.BMI = profile.BMI
	h.FamilySize = profile.FamilySize
	h.CreatedAt = profile.CreatedAt
	h.UpdatedAt = profile.UpdatedAt
}

// ToCompleteDomain converts HealthProfileModel with relationships to domain objects
func (h *HealthProfileModel) ToCompleteDomain() (*domain.HealthProfile, []domain.MedicalCondition, []domain.MedicalExpense, []domain.InsurancePolicy) {
	profile := h.ToDomain()
	
	conditions := make([]domain.MedicalCondition, len(h.Conditions))
	for i, condition := range h.Conditions {
		conditions[i] = *condition.ToDomain()
	}
	
	expenses := make([]domain.MedicalExpense, len(h.Expenses))
	for i, expense := range h.Expenses {
		expenses[i] = *expense.ToDomain()
	}
	
	policies := make([]domain.InsurancePolicy, len(h.Policies))
	for i, policy := range h.Policies {
		policies[i] = *policy.ToDomain()
	}
	
	return profile, conditions, expenses, policies
}